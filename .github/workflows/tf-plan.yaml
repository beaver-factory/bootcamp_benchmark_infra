name: Terraform Plan for Pull Requests

on: 
  pull_request:
    branches:
      - main

env: 
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  TF_VAR_admin_password: ${{ secrets.PSQL_ADMIN_PASSWORD }}
  TF_VAR_exception_action_group_service_uri: ${{ secrets.EXCEPTION_ALERT_URI }}

jobs:
  CommentTerraformPlan:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Initialise Terraform
      run: |
        terraform init

    - name: Create Terraform Plan
      id: plan
      run: |
        terraform plan -input=false -no-color -out=tfplan \
        && terraform show -no-color tfplan
    
    - name: Reformat Terraform Plan
      run: |
        echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
        | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

    - name: Save Terraform Plan to Variable
      run: |
        PLAN=$(cat plan.txt)
        echo "PLAN<<EOF" >> $GITHUB_ENV
        echo "$PLAN" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Comment Terraform Plan on PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR:

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });

          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Here is your Terraform plan')
          });

          // 2. Write new comment
          const output = `Here is your Terraform plan!\n\n\`\`\`\n${{ env.PLAN }}\n\`\`\``;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

          // 3. Delete previous comment so PR timeline makes sense
          if (botComment) {
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id
            })
          };
